pipeline {
	agent {
		kubernetes {
			inheritFrom "kube-agent"
            cloud "kubernetes"
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              namespace: default
              labels:
                jenkins: slave
            spec:
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:latest
                args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
              - name: maven
                image: maven:3.8.7-openjdk-18-slim
                command:
                - sleep
                args:
                - 99d
              - name: docker
                image: docker:dind
                tty: true
                command:
                - sleep
                args:
                - 99d
                securityContext:
                  privileged: true
                volumeMounts:
                - name: dockersock
                  mountPath: "/var/run/docker.sock"
              volumes:
              - name: dockersock
                hostPath:
                  path: /var/run/docker.sock 
            '''
		}
	}
	environment {
		// Docker ENV vars
    	USER_CREDENTIALS = credentials('Docker-credentials')
    	TAG = "0.0.${BUILD_NUMBER}"
	}
	stages{
		stage("Build"){
			steps{
				container('maven'){
					// With tests passed build and package the app
					sh 'mvn -f sample-maven-web-app/pom.xml clean install'
				}
			}
		}
		stage("Containerize"){
			  steps{
			  	container('docker'){
				  script {				
						// We also build the Docker image. I used my docker account and tagged the image based on the pipeline build number.
                    			dockerImage = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:${TAG}", "-f sample-maven-web-app/Dockerfile .")
                    			dockerImageLatest = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:latest", "-f sample-maven-web-app/Dockerfile .")
        	       	}
        	    }
			}
		}	
	}
}
