pipeline {
  agent {
    kubernetes {
      inheritFrom "kube-agent"
            cloud "kubernetes"
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              namespace: default
              labels:
                jenkins: slave
            spec:
              initContainers:
              -  name: init-docker-config
                 image: busybox
                 command: ["/bin/sh", "-c"]
                 args:
                 - echo "{\"insecure-registries\":[\"192.168.49.2:32002\"]}" >> /etc/docker/daemon.json
                 volumeMounts:
                 - name: docker-config
                   mountPath: /etc/docker
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:latest
                args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
              - name: maven
                image: maven:3.8.7-openjdk-18-slim
                command:
                - sleep
                args:
                - 99d
              - name: docker
                image: docker:dind
                tty: true
                command:
                - dockerd
                - '--host=unix:///var/run/docker.sock'
                - '--host=tcp://0.0.0.0:2375'
                securityContext:
                  privileged: true
                volumeMounts:
                - name: docker-config
                  mountPath: /etc/docker
              - name: kube
                image: alpine/k8s:1.26.3
                command:
                - sleep
                args:
                - 99d
              volumes:
              - name: docker-config
                hostPath:
                  path: /etc/docker
            '''
    }
  }
  environment {

    // Docker ENV vars
      USER_CREDENTIALS = credentials('Docker-credentials')
      TAG = "0.0.${BUILD_NUMBER}"

    // Nexus ENV vars
      NEXUS_CREDENTIAL_ID = "Nexus-credentials-jenkins"
      NEXUS_DOCKER_REGISTRY = "http://192.168.49.2:32002"

  }
  stages{
    stage("Build"){
      steps{
        container('maven'){
          // With tests passed build and package the app
          sh 'mvn -f sample-maven-web-app/pom.xml clean install'
        }
      }
    }
    stage("Containerize"){
        steps{
          container('docker'){
          script {        
            // We also build the Docker image. I used my docker account and tagged the image based on the pipeline build number.
                          dockerImage = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:${TAG}", "-f sample-maven-web-app/Dockerfile .")
                          dockerImageLatest = docker.build("${USER_CREDENTIALS_USR}/sample-maven-web-app:latest", "-f sample-maven-web-app/Dockerfile .")
          }
        }
      }
    }
    stage("Deliver Artifact"){
      steps{
          container('maven'){
            //We changed the pom.xml file accordingly to deploy to our private Nexus artifactory
            withMaven(globalMavenSettingsConfig: 'maven-settings-xml') {
            sh 'mvn -f sample-maven-web-app/pom.xml clean deploy'
          }
        }
      }
    }
    stage("Deliver Docker Image") {
          steps{
              container('docker'){
                  script {
                  // Pushing the image to our local docker repository inside Nexus
                      docker.withRegistry( NEXUS_DOCKER_REGISTRY , NEXUS_CREDENTIAL_ID ) {
                        dockerImage.push()
                        dockerImageLatest.push()
            }
          } 
        }   
      }
    }
     stage("Kubernetes Deployment") {
          steps{
              container('kube'){
                sh '''
                kubectl apply -f sample-maven-web-app/kube/deployment.yaml
                ./sample-maven-web-app/kube/deploy.sh
                '''
        }   
      }
    }
  }
}
